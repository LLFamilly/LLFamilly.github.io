1:过滤器 ，内置过滤器 9个
      json
      limitTo
      filter
      number
      uppercase
      lowercase
      date
      currency
      orderBy
用来处理数据的，这个过滤器我们假设在页面使用
      {{data|limitTo:'1':'2'}}
2:自定义过滤器
     app.filter("reverse",function(){

            //谁调用这个过滤器，参数就指向到谁
            return function(arg){
                    return arg.split("").reverse().join("");
            }
     })
    {{data|reverse}}
3:依赖注入
        两种方式的注入 我们需要使用angular 的什么功能，我们就可以注入什么功能
 angularjs 每个模块之间是相互解耦，每部分的代码是独立的，要使用就注入，方便去从用代码
                1：行内式注入
                        app.controller("appController",["$scope",function($scope){

                        }])
                2：推断式注入
                        app.controller("appController",function($scope){

                        })
                //推荐是第一种，行内式注入,代码压缩，导致变量名字改变
4:服务，angular 里面的模块就是功能，功能是以服务的形式提供，我们要使用这些服务，就注入这些服务
       1：$scope
       2：$rootScope [往这个上面绑定的数据在整个app 里面可以共享]
       3：$log 整个是用来打印日志
       4: $interval()
       5: $timeout
       6: $location [用来获取地址栏当中所有的信息]
       7: $http 用来发送请求，交互数据的，获取到数据，往$scope 去绑定，就自动更新到整个页面。

            7.1:get 方式提交
            $http({
                method:"get",
                url:"",
                params:{

                }
            }).success(function(data,status,responseHeader,requestHeader){

            }).error(function(data){

            })
            7.1:post 方式提交
            $http({
                method:"post",
                url:"",
                data:"",  //post 发送数据的属性.
                headers:{
                      Content-Type:"application/xxxx"
                }
            }).success(function(data,status,responseHeader,requestHeader){

            }).error(function(data){

            });
            7.3 跨域的 jsonp 跨域 ，angular怎么去做，后台必须支持jsonp
            [支持jsonp，接收callback 的参数，返回的数据是一个回调函数的调用]
            $http({
                method:"jsonp", 底层使用script 标签发送请求
                url:"",
                params:{
                      callback:"JSON_CALLBACK"//定义一个全局的回调函数.
                }
            }).success(function(data,status,responseHeader,requestHeader){

            })
            7.4:cors 跨域，angular 怎么处理
                【如果是cors 跨域，都是在服务器给响应头】
                 客户端改怎么写，就怎么写
            7.5：跨域的插件 【就算跨域，我的请求也可以发送出去，也可以接收数据】
            把浏览器的跨域限制解除了
       8:$filter 的服务的使用
            app.controller("appController",function($filter,$scope){
                    //我要去格式化日期
                   var dateFuc=$filter("date");
                   var date=dateFuc(new Date(),"yyyy-MM-dd");
                   $scope.date=date;
            })
       //table 的案例
5：自定义服务，angular 给我们提供了一个接口，可以去编写我们的自己的服务

        自定义服务
            //第一种方式
            app.service("$mysql",["$http",function($http){
                    this.connect=function(ip,port,username,password){
                            //去编写业务逻辑.
                    }
            }]);
            //第二种方式factory
            app.service("$oracle",["$http",function($http){
                                    return {
                                          sendSql:function(sql){

                                          }
                                    }
                            }]);
             app.value("author","xuhaoya");

            //在我的应用当中去使用这些服务
            app.controller("appController",function($oracle,$scope,author){
                    var data=$oracle.sendSql("select * from table");
                    $scope.data=data;
                    $scope.author=author
            })






